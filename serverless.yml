org: photonadmin # Corresponds to the serverless.com account used for monitoring
app: photonranch

service: photonranch-projects

package:
  exclude:
    - venv/**
    - node_modules/**

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-pitr
  - serverless-domain-manager

# Enable point-in-time-recovery
custom:
  pitr:
    - tableName: ${self:provider.environment.PROJECTS_TABLE}
      enabled: true

  # This is the 'variable' for the customDomain.basePath value, based on the stage.
  # Run as `sls deploy --stage <stage_name>`
  stage:
    dev: dev
    test: test 

  customDomain:
    domainName: 'projects.photonranch.org'
    basePath: ${self:custom.stage.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  environment: 
    PROJECTS_TABLE: photonranch-projects
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}
  iamRoleStatements:
    - Effect: Allow 
      Action: 
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}*"

resources: # CloudFormation template syntax from here on.
  Resources:

    # Configure API gateway "Gateway Responses" to work with CORS restrictions
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    # Define the dynamodb table we use to store projects

    projectsTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PROJECTS_TABLE}
        AttributeDefinitions:
          - AttributeName: project_name
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
          #- AttributeName: site
            #AttributeType: S
          #- AttributeName: creator_id
            #AttributeType: S
        KeySchema:
          - AttributeName: project_name
            KeyType: HASH
          - AttributeName: created_at
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: userid-createdat-index
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          #- IndexName: site-end-index
            #KeySchema:
              #- AttributeName: site
                #KeyType: HASH
              #- AttributeName: end
                #KeyType: RANGE
            #Projection:
              #ProjectionType: ALL
            #ProvisionedThroughput:
              #ReadCapacityUnits: 1
              #WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  authorizerFunc: 
    handler: authorizer.auth
    cors: true
  addNewProject:
    handler: handler.addNewProject
    events:
      - http:
          path: new-project
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  getProject:
    handler: handler.getProject
    events:
      - http:
          path: get-project
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  addProjectData:
    handler: handler.addProjectData
    events:
      - http:
          path: add-project-data
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  deleteProject:
    handler: handler.deleteProject
    events:
      - http:
          path: delete-project
          method: post
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  getAllProjects:
    handler: handler.getAllProjects
    events:
      - http:
          path: get-all-projects
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  getUserProjects:
    handler: handler.getUserProjects
    events:
      - http:
          path: get-user-projects
          method: post
          #authorizer:
            #name: authorizerFunc
            #resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials